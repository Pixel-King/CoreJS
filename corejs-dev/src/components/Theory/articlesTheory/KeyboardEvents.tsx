import * as React from 'react';
import usKeyImg from './Events-img/us-layout.svg';
import germanKeyImg from './Events-img/german-layout.svg';

const KeyboardEvents: React.FC =() => {
    return (
    <>
    <h1>Клавиатура: keydown и keyup</h1>
    <p>Прежде чем перейти к клавиатуре, обратите внимание, что на современных устройствах есть и другие способы «ввести что-то». Например, распознавание речи (это особенно актуально на мобильных устройствах) или Копировать/Вставить с помощью мыши.</p>
    <p>Поэтому, если мы хотим корректно отслеживать ввод в поле <code className="fs-6">{`<input>`}</code>, то одних клавиатурных событий недостаточно. Существует специальное событие <strong>input</strong>, чтобы отслеживать любые изменения в поле <code className="fs-6">{`<input>`}</code>. И оно справляется с такой задачей намного лучше. </p>
    <p>События клавиатуры же должны использоваться, если мы хотим обрабатывать взаимодействие пользователя именно с клавиатурой (в том числе виртуальной). К примеру, если нам нужно реагировать на стрелочные клавиши <strong>Up</strong> и <strong>Down</strong> или горячие клавиши (включая комбинации клавиш).</p>
    <h2>Тестовый стенд</h2>
    <p>Для того, чтобы лучше понять, как работают события клавиатуры, можно использовать <a href="https://plnkr.co/edit/POrrNntN9BvpsxUY?p=preview&preview">тестовый стенд</a>.</p>
    <h2>События keydown и keyup</h2>
    <p>Событие <strong>keydown</strong> происходит при нажатии клавиши, а <strong>keyup</strong> – при отпускании.</p>
    <h3><code>event.code</code> и <code>event.key</code></h3>
    <p>Свойство <code className="fs-6">key</code> объекта события позволяет получить символ, а свойство <code className="fs-6">code</code> – «физический код клавиши».</p>
    <p>К примеру, одну и ту же клавишу Z можно нажать с клавишей Shift и без неё. В результате получится два разных символа: <strong>z</strong> в нижнем регистре и <strong>Z</strong> в верхнем регистре.</p>
    <p>Свойство <code className="fs-6">event.key</code> – это непосредственно символ, и он может различаться. Но <code className="fs-6">event.code</code> всегда будет тот же:</p>
    <table className="table table-bordered text-center">
        <thead>
            <tr>
                <th scope="col"><p><strong>Клавиша</strong></p></th>
                <th scope="col"><p><strong><code className="fs-6">event.key</code></strong></p></th>
                <th scope="col"><p><strong><code className="fs-6">event.code</code></strong></p></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><p>Z</p></td>
                <td><p>z (нижний регистр)</p></td>
                <td><p>KeyZ</p></td>
            </tr>
            <tr>
                <td><p>Shift+Z</p></td>
                <td><p>Z (Верхний регистр)</p></td>
                <td><p>KeyZ</p></td>
            </tr>
        </tbody>
    </table>
    <p>Если пользователь работает с разными языками, то при переключении на другой язык символ изменится с "Z" на совершенно другой. Получившееся станет новым значением <code className="fs-6">event.key</code>, тогда как <code className="fs-6">event.code</code> останется тем же: "KeyZ".</p>
    <div className="fst-italic border-3 border-start border-warning px-3">
        <p><strong>«KeyZ» и другие клавишные коды</strong></p>
        <p>У каждой клавиши есть код, который зависит от её расположения на клавиатуре. Подробно о клавишных кодах можно прочитать в <a href="https://www.w3.org/TR/uievents-code/">спецификации о кодах событий UI</a>.</p>
        <p>Например:</p>
        <ul>
            <li>
                <p>Буквенные клавиши имеют коды по типу "{`Key<буква>`}": "KeyA", "KeyB" и т.д.</p>
            </li>
            <li>
                <p>Коды числовых клавиш строятся по принципу: "{`Digit<число>`}": "Digit0", "Digit1" и т.д.</p>
            </li>
            <li>
                <p>Код специальных клавиш – это их имя: "Enter", "Backspace", "Tab" и т.д.</p>
            </li>
        </ul>
        <p>Существует несколько широко распространённых раскладок клавиатуры, и в спецификации приведены клавишные коды к каждой из них.</p>
    </div>

    <div className="fst-italic border-3 border-start border-warning px-3">
        <p><strong>Регистр важен: "KeyZ", а не "keyZ"</strong></p>
        <p>Пожалуйста, избегайте опечаток: правильно <strong>KeyZ</strong>, а не <strong>keyZ</strong>. Условие <code className="fs-6">event.code=="keyZ"</code> работать не будет: первая буква в слове "Key" должна быть заглавная.</p>
    </div>

    <p>А что, если клавиша не буквенно-цифровая? Например, Shift или F1, или какая-либо другая специальная клавиша? В таких случаях значение свойства <code className="fs-6">event.key</code> примерно тоже, что и у <code className="fs-6">event.code</code>:</p>
    <table className="table table-bordered text-center">
        <thead>
            <tr>
                <th scope="col"><p><strong>Клавиша</strong></p></th>
                <th scope="col"><p><strong><code className="fs-6">event.key</code></strong></p></th>
                <th scope="col"><p><strong><code className="fs-6">event.code</code></strong></p></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><p>F1</p></td>
                <td><p>F1</p></td>
                <td><p>F1</p></td>
            </tr>
            <tr>
                <td><p>Backspace</p></td>
                <td><p>Backspace</p></td>
                <td><p>Backspace</p></td>
            </tr>
            <tr>
                <td><p>Shift</p></td>
                <td><p>Shift</p></td>
                <td><p>ShiftRight или ShiftLeft</p></td>
            </tr>
        </tbody>
    </table>
    <p>Обратите внимание, что <code className="fs-6">event.code</code> точно указывает, какая именно клавиша нажата. Так, большинство клавиатур имеют по две клавиши <strong>Shift</strong>: слева и справа. <code className="fs-6">event.code</code> уточняет, какая именно из них была нажата, в то время как <code className="fs-6">event.key</code> сообщает о «смысле» клавиши: что вообще было нажато (<strong>Shift</strong>).</p>
    <p>Допустим, мы хотим обработать горячую клавишу <strong>Ctrl+Z</strong> (или <strong>Cmd+Z</strong> для Mac). Большинство текстовых редакторов к этой комбинации подключают действие «Отменить». Мы можем поставить обработчик событий на <strong>keydown</strong> и проверять, какая клавиша была нажата.</p>
    <p>Здесь возникает дилемма: в нашем обработчике стоит проверять значение <code className="fs-6">event.key</code> или <code className="fs-6">event.code</code>?</p>
    <p>С одной стороны, значение <code className="fs-6">event.key</code> – это символ, он изменяется в зависимости от языка, и если у пользователя установлено в ОС несколько языков, и он переключается между ними, нажатие на одну и ту же клавишу будет давать разные символы. Так что имеет смысл проверять <code className="fs-6">event.code</code>, ведь его значение всегда одно и тоже.</p>
    <p>Вот пример кода:</p>
    <pre className="text-bg-dark px-3 py-3">
        <code className="fs-6">
        {`document.addEventListener('keydown', function(event) {
    if (event.code == 'KeyZ' && (event.ctrlKey || event.metaKey)) {
        alert('Отменить!')
    }
});`}
        </code>
    </pre>
    <p>С другой стороны, с <code className="fs-6">event.code</code> тоже есть проблемы. На разных раскладках к одной и той же клавише могут быть привязаны разные символы.</p>
    <p>Например, вот схема стандартной (US) раскладки («QWERTY») и под ней немецкой («QWERTZ») раскладки (из Википедии):</p>
    <img className="mx-auto d-block" src={usKeyImg} alt="us"></img>
    <br />
    <img className="mx-auto d-block" src={germanKeyImg} alt="german"></img>
    <br />
    <p>Для одной и той же клавиши в американской раскладке значение <code className="fs-6">event.code</code> равно «Z», в то время как в немецкой «Y».</p>
    <p>Буквально, для пользователей с немецкой раскладкой <code className="fs-6">event.code</code> при нажатии на Y будет равен <strong>KeyZ</strong>.</p>
    <p>Если мы будем проверять в нашем коде <code className="fs-6">event.code == 'KeyZ'</code>, то для людей с немецкой раскладкой такая проверка сработает, когда они нажимают Y.</p>
    <p>Звучит очень странно, но это и в самом деле так. В спецификации прямо упоминается такое поведение.</p>
    <p>Так что <code className="fs-6">event.code</code> может содержать неправильный символ при неожиданной раскладке. Одни и те же буквы на разных раскладках могут сопоставляться с разными физическими клавишами, что приводит к разным кодам. К счастью, это происходит не со всеми кодами, а с несколькими, например <strong>KeyA</strong>, <strong>KeyQ</strong>, <strong>KeyZ</strong> (как мы уже видели), и не происходит со специальными клавишами, такими как <strong>Shift</strong>. Вы можете найти полный список проблемных кодов в <a href="https://www.w3.org/TR/uievents-code/#table-key-code-alphanumeric-writing-system">спецификации</a>.</p>
    <p>Чтобы отслеживать символы, зависящие от раскладки, <code className="fs-6">event.key</code> надёжнее.</p>
    <p>С другой стороны, преимущество <code className="fs-6">event.code</code> заключается в том, что его значение всегда остаётся неизменным, будучи привязанным к физическому местоположению клавиши, даже если пользователь меняет язык. Так что горячие клавиши, использующие это свойство, будут работать даже в случае переключения языка.</p>
    <p>Хотим поддерживать клавиши, меняющиеся при раскладке? Тогда <code className="fs-6">event.key</code> – верный выбор.</p>
    <p>Или мы хотим, чтобы горячая клавиша срабатывала даже после переключения на другой язык? Тогда <code className="fs-6">event.code</code> может быть лучше.</p>
    <h2>Автоповтор</h2>
    <p>При долгом нажатии клавиши возникает автоповтор: <strong>keydown</strong> срабатывает снова и снова, и когда клавишу отпускают, то отрабатывает <strong>keyup</strong>. Так что ситуация, когда много <strong>keydown</strong> и один <strong>keyup</strong>, абсолютно нормальна.</p>
    <p>Для событий, вызванных автоповтором, у объекта события свойство <code className="fs-6">event.repeat</code> равно <code className="fs-6">true</code>.</p>
    <h2>Действия по умолчанию</h2>
    <p>Действия по умолчанию весьма разнообразны, много чего можно инициировать нажатием на клавиатуре.</p>
    <p>Для примера:</p>
    <ul>
        <li>
            <p>Появление символа (самое очевидное).</p>
        </li>
        <li>
            <p>Удаление символа (клавиша <strong>Delete</strong>).</p>
        </li>
        <li>
            <p>Прокрутка страницы (клавиша <strong>PageDown</strong>).</p>
        </li>
        <li>
            <p>Открытие диалогового окна браузера «Сохранить» (<strong>Ctrl+S</strong>)</p>
        </li>
        <li>
            <p>…и так далее.</p>
        </li>
    </ul>
    <p>Предотвращение стандартного действия с помощью <code className="fs-6">event.preventDefault()</code> работает практически во всех сценариях, кроме тех, которые происходят на уровне операционной системы. Например, комбинация <strong>Alt+F4</strong> инициирует закрытие браузера в Windows, что бы мы ни делали в JavaScript.</p>
    <h2>«Дела минувших дней»</h2>
    <p>В прошлом существовало также событие <strong>keypress</strong>, а также свойства <code className="fs-6">keyCode</code>, <code className="fs-6">charCode</code>, <code className="fs-6">which</code> у объекта события.</p>
    <p>Но количество браузерных несовместимостей при работе с ними было столь велико, что у разработчиков спецификации не было другого выхода, кроме как объявить их устаревшими и создать новые, современные события (которые и описываются в этой главе). Старый код ещё работает, так как браузеры продолжают поддерживать и <strong>keypress</strong>, и <code className="fs-6">keyCode</code> с <code className="fs-6">charCode</code>, и <code className="fs-6">which</code>, но более нет никакой необходимости в их использовании.</p>
    <h2>Итого</h2>
    <p>Нажатие клавиши всегда генерирует клавиатурное событие, будь то буквенно-цифровая клавиша или специальная типа <strong>Shift</strong> или <strong>Ctrl</strong> и т.д. Единственным исключением является клавиша <strong>Fn</strong>, которая присутствует на клавиатуре некоторых ноутбуков. События на клавиатуре для неё нет, потому что она обычно работает на уровне более низком, чем даже ОС.</p>
    <p>События клавиатуры:</p>
    <ul>
        <li>
            <p><strong>keydown</strong> – при нажатии на клавишу (если клавиша остаётся нажатой, происходит автоповтор),</p>
        </li>
        <li>
            <p><strong>keyup</strong> – при отпускании клавиши.</p>
        </li>
    </ul>
    <p>Главные свойства для работы с клавиатурными событиями:</p>
    <ul>
        <li>
            <p><code className="fs-6">code</code> – «код клавиши» ("<strong>KeyA</strong>", "<strong>ArrowLeft</strong>" и так далее), особый код, привязанный к физическому расположению клавиши на клавиатуре.</p>
        </li>
        <li>
            <p><code className="fs-6">key</code> – символ ("<strong>A</strong>", "<strong>a</strong>" и так далее), для не буквенно-цифровых групп клавиш (таких как <strong>Esc</strong>) обычно имеет то же значение, что и <code className="fs-6">code</code>.</p>
        </li>
    </ul>
    <p>В прошлом события клавиатуры иногда использовались для отслеживания ввода данных пользователем в полях формы. Это ненадёжно, потому как ввод данных не обязательно может осуществляться с помощью клавиатуры. Существуют события <strong>input</strong> и <strong>change</strong> специально для обработки ввода. Они срабатывают в результате любого ввода, включая Копировать/Вставить мышью и распознавание речи.</p>
    <p>События клавиатуры же должны использоваться только по назначению – для клавиатуры. Например, чтобы реагировать на горячие или специальные клавиши.</p>

    </>
    );
}

export default KeyboardEvents;