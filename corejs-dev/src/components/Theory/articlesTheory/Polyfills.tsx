import * as React from 'react';

const Polyfills: React.FC =() => {
    return (
    <>
    <h1>Полифилы</h1>
    <p>JavaScript - динамично развивающийся язык программирования. Регулярно появляются предложения о добавлении в JS новых возможностей, они анализируются, и, если предложения одобряются, то описания новых возможностей языка переносятся в черновик <a href="https://tc39.github.io/ecma262/">https://tc39.github.io/ecma262/</a>, а затем публикуются в <a href="https://www.ecma-international.org/publications/standards/Ecma-262.htm">спецификации</a>.</p>
    <p>Разработчики JavaScript-движков сами решают, какие предложения реализовывать в первую очередь. Они могут заранее добавить в браузеры поддержку функций, которые всё ещё находятся в черновике, и отложить разработку функций, которые уже перенесены в спецификацию, потому что они менее интересны разработчикам или более сложные в реализации.</p>
    <p>Таким образом, довольно часто реализуется только часть стандарта.</p>
    <p>Можно проверить текущее состояние поддержки различных возможностей JavaScript на странице <a href="https://kangax.github.io/compat-table/es6/">https://kangax.github.io/compat-table/es6/</a> (нам ещё предстоит изучить многое из этого списка).</p>
    <h2>Babel</h2>
    <p>Когда мы используем современные возможности JavaScript, некоторые движки могут не поддерживать их. Как было сказано выше, не везде реализованы все функции.</p>
    <p>И тут приходит на помощь Babel.</p>
    <p><a href="https://babeljs.io">Babel</a> - это <a href="https://ru.wikipedia.org/wiki/%D0%A2%D1%80%D0%B0%D0%BD%D1%81%D0%BF%D0%B0%D0%B9%D0%BB%D0%B5%D1%80">транспилер</a>. Он переписывает современный JavaScript-код в предыдущий стандарт.</p>
    <p>На самом деле, есть две части Babel:</p>
    <ol>
        <li>
            <p>Во-первых, транспилер, который переписывает код. Разработчик запускает Babel на своём компьютере. Он переписывает код в старый стандарт. И после этого код отправляется на сайт. Современные сборщики проектов, такие как <a href="http://webpack.github.io/">webpack</a> или <a href="https://brunch.io/">brunch</a>, предоставляют возможность запускать транспилер автоматически после каждого изменения кода, что позволяет экономить время.</p>
        </li>
        <li>
            <p>Во-вторых, полифил.</p>
            <p> Новые возможности языка могут включать встроенные функции и синтаксические конструкции. Транспилер переписывает код, преобразовывая новые синтаксические конструкции в старые. Но что касается новых встроенных функций, нам нужно их как-то реализовать. JavaScript является высокодинамичным языком, скрипты могут добавлять/изменять любые функции, чтобы они вели себя в соответствии с современным стандартом.</p>
            <p> Термин &quot;полифил&quot; означает, что скрипт &quot;заполняет&quot; пробелы и добавляет современные функции.</p>
            <p> Два интересных хранилища полифилов:</p>
            <ul>
                <li><a href="https://github.com/zloirock/core-js">core js</a> поддерживает много функций, можно подключать только нужные.</li>
                <li><a href="https://polyfill.io">polyfill.io</a> - сервис, который автоматически создаёт скрипт с полифилом в зависимости от необходимых функций и браузера пользователя.</li>
            </ul>
        </li>
    </ol>
    <p>Таким образом, чтобы современные функции поддерживались в старых движках, нам надо установить транспилер и добавить полифил.</p>
    <p>Google Chrome обычно поддерживает современные функции, можно запускать новейшие примеры без каких-либо транспилеров, но и другие современные браузеры тоже хорошо работают.</p>

    </>
    );
}

export default Polyfills;